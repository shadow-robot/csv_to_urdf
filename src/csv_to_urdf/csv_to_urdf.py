#!/usr/bin/env python
#
# Copyright 2011 Shadow Robot Company Ltd.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import roslib; roslib.load_manifest('csv_to_urdf')
from element import Element
import sys

class CsvToUrdf(object):
    """
    """

    def __init__(self, csv_path, urdf_path):
        """
        """
        lines = None
        try:
            csv_file = open(csv_path, "r")
            lines = csv_file.readlines()
            csv_file.close()
        except:
            print "Couldn't open file: "+ csv_path
            return

        #contains all the elements described in the csv file
        self.elements = []

        self.titles = []
        index = 0
        while True:
            line1 = lines[index]
            line2 = lines[index + 1]
            if index == 0:
                #first line contains titles
                self.parse_titles_(line1)
            else:
                self.parse_line_(line1, line2)

            if index + 1 < len(lines) - 1:
                index = index + 1
            else:
                break

        robot = self.to_urdf()
        #simply outputs to the console if no path specified
        urdf_file = sys.stdout
        if urdf_path != None:
            urdf_file = open(urdf_path, "w")
        urdf_file.write(robot)
        urdf_file.close()

    def parse_titles_(self, line):
        splitted_line = line.split(";")
        for title in splitted_line:
            self.titles.append(self.clean_(title).upper() )

    def parse_line_(self, line1, line2):
        splitted_line1 = line1.split(";")
        splitted_line2 = line2.split(";")
        data_map_1 = dict()
        data_map_2 = dict()

        for title, data1, data2 in zip(self.titles, splitted_line1, splitted_line2):
            data_map_1[title] = self.clean_(data1)
            data_map_2[title] = self.clean_(data2)

        self.elements.append( Element(data_map_1, data_map_2) )

    def clean_(self, string):
        return string.strip(" ").strip("\n").strip("\t").strip()

    def to_urdf(self):
        robot = ""
        robot += "<?xml version=\"1.0\" ?>\n"
        robot += "<!-- =================================================================================== -->\n"
        robot += "<!-- |    This document was autogenerated by csv to urdf                               | -->\n"
        robot += "<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->\n"
        robot += "<!-- =================================================================================== -->\n"
        robot += "<robot name=\"RobotFromCsv\" xmlns:body=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#body\" xmlns:controller=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#controller\" xmlns:geom=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#geom\" xmlns:interface=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#interface\" xmlns:joint=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#slider\" xmlns:sensor=\"http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor\" xmlns:xacro=\"http://ros.org/wiki/xacro\">\n"
        robot += "  <material name=\"Blue\">\n"
        robot += "    <color rgba=\"0.0 0.0 0.8 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <material name=\"Green\">\n"
        robot += "    <color rgba=\"0.0 0.8 0.0 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <material name=\"Grey\">\n"
        robot += "    <color rgba=\"0.2 0.2 0.2 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <material name=\"LightGrey\">\n"
        robot += "    <color rgba=\"0.6 0.6 0.6 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <material name=\"Red\">\n"
        robot += "    <color rgba=\"0.8 0.0 0.0 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <material name=\"White\">\n"
        robot += "    <color rgba=\"1.0 1.0 1.0 1.0\"/>\n"
        robot += "  </material>\n"
        robot += "  <gazebo>\n"
        robot += "    <controller:pr2_gazebo_ros_controller_manager name=\"pr2_gazebo_ros_controller_manager\" plugin=\"libpr2_gazebo_ros_controller_manager.so\">\n"
        robot += "      <alwaysOn>true</alwaysOn>\n"
        robot += "      <updateRate>1000.0</updateRate>\n"
        robot += "    </controller:pr2_gazebo_ros_controller_manager>\n"
        robot += "  </gazebo>\n"
        robot += "  <link name=\"world\"/>\n"
        robot += "  <link name=\"base_link\"/>\n"
        robot += "  <joint name=\"base_link_to_world_fixed\" type=\"fixed\">\n"
        robot += "    <parent link=\"world\"/>\n"
        robot += "    <child link=\"base_link\"/>\n"
        robot += "    <origin rpy=\"0 0 0\" xyz=\"0 0 0\"/>\n"
        robot += "  </joint>\n"

        for element in self.elements:
            robot += element.to_urdf()

        robot += "</robot>"

        return robot


